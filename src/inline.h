#ifndef INLINE_H
#define INLINE_H

#include <stdbool.h>

#include "ast.h"
#include "utf8.h"

void parse_inline(ASTNode node[static 1]);

enum TOKEN_TYPES {
  TOKEN_TEXT = 0,
  TOKEN_BACKTICKS,
  TOKEN_STARS,
  TOKEN_UNDERSCORES,
  TOKEN_PUNCTUATION,
  TOKEN_WHITESPACE,
};

static const int unsigned TOKEN_TYPES_SIZE = 6;
static char const *TOKEN_TYPE_NAMES[TOKEN_TYPES_SIZE] = {
    "TEXT", "BACKTICKS", "STARS", "UNDERSCORES", "PUNCTUATION", "WHITESPACE",
};

typedef struct {
  codepoint min;
  codepoint max;
} codepoint_range;

typedef struct codepoint_collection {
  size_t length;
  codepoint_range *ranges;
  bool runnable;
} codepoint_collection;

////////////////////////////
// token codepoint ranges
////////////////////////////

static const codepoint_range BACKTICK_RANGES[1] = {
    {'`', '`'},
};

static const codepoint_range STAR_RANGES[1] = {
    {'*', '*'},
};

static const codepoint_range UNDERSCORE_RANGES[1] = {
    {'_', '_'},
};

// TODO: Come back and run see if these segments can be further merged
static const codepoint_range PUNCTUATION_RANGES[360] = {
    // ascii punctiation
    {0x21, 0x2F},
    {0x3A, 0x40},
    {0x5B, 0x60},
    {0x7B, 0x7E},
    // unicode Pc category
    {0x203F, 0x2040},
    {0x2054, 0x2054},
    {0xFE33, 0xFE34},
    {0xFE4D, 0xFE4F},
    {0xFF3F, 0xFF3F},
    // unicode Pd category
    {0x58A, 0x58A},
    {0x5BE, 0x5BE},
    {0x1400, 0x1400},
    {0x1806, 0x1806},
    {0x2010, 0x2015},
    {0x2E17, 0x2E17},
    {0x2E1A, 0x2E1A},
    {0x2E3A, 0x2E3B},
    {0x2E40, 0x2E40},
    {0x301C, 0x301C},
    {0x3030, 0x3030},
    {0x30A0, 0x30A0},
    {0xFE31, 0xFE32},
    {0xFE58, 0xFE58},
    {0xFE63, 0xFE63},
    {0xFF0D, 0xFF0D},
    {0x10EAD, 0x10EAD},
    // unicode Pe category
    {0xF3B, 0xF3B},
    {0xF3D, 0xF3D},
    {0x169C, 0x169C},
    {0x2046, 0x2046},
    {0x207E, 0x207E},
    {0x208E, 0x208E},
    {0x2309, 0x2309},
    {0x230B, 0x230B},
    {0x232A, 0x232A},
    {0x2769, 0x2769},
    {0x276B, 0x276B},
    {0x276D, 0x276D},
    {0x276F, 0x276F},
    {0x2771, 0x2771},
    {0x2773, 0x2773},
    {0x2775, 0x2775},
    {0x27C6, 0x27C6},
    {0x27E7, 0x27E7},
    {0x27E9, 0x27E9},
    {0x27EB, 0x27EB},
    {0x27ED, 0x27ED},
    {0x27EF, 0x27EF},
    {0x2984, 0x2984},
    {0x2986, 0x2986},
    {0x2988, 0x2988},
    {0x298A, 0x298A},
    {0x298C, 0x298C},
    {0x298E, 0x298E},
    {0x2990, 0x2990},
    {0x2992, 0x2992},
    {0x2994, 0x2994},
    {0x2996, 0x2996},
    {0x2998, 0x2998},
    {0x29D9, 0x29D9},
    {0x29DB, 0x29DB},
    {0x29FD, 0x29FD},
    {0x2E23, 0x2E23},
    {0x2E25, 0x2E25},
    {0x2E27, 0x2E27},
    {0x2E29, 0x2E29},
    {0x3009, 0x3009},
    {0x300B, 0x300B},
    {0x300D, 0x300D},
    {0x300F, 0x300F},
    {0x3011, 0x3011},
    {0x3015, 0x3015},
    {0x3017, 0x3017},
    {0x3019, 0x3019},
    {0x301B, 0x301B},
    {0x301E, 0x301F},
    {0xFD3E, 0xFD3E},
    {0xFE18, 0xFE18},
    {0xFE36, 0xFE36},
    {0xFE38, 0xFE38},
    {0xFE3A, 0xFE3A},
    {0xFE3C, 0xFE3C},
    {0xFE3E, 0xFE3E},
    {0xFE40, 0xFE40},
    {0xFE42, 0xFE42},
    {0xFE44, 0xFE44},
    {0xFE48, 0xFE48},
    {0xFE5A, 0xFE5A},
    {0xFE5C, 0xFE5C},
    {0xFE5E, 0xFE5E},
    {0xFF09, 0xFF09},
    {0xFF3D, 0xFF3D},
    {0xFF5D, 0xFF5D},
    {0xFF60, 0xFF60},
    {0xFF63, 0xFF63},
    // unicode Pf category
    {0x00BB, 0x00BB},
    {0x2019, 0x2019},
    {0x201D, 0x201D},
    {0x203A, 0x203A},
    {0x2E03, 0x2E03},
    {0x2E05, 0x2E05},
    {0x2E0A, 0x2E0A},
    {0x2E0D, 0x2E0D},
    {0x2E1D, 0x2E1D},
    {0x2E21, 0x2E21},
    // unicode Pi category
    {0x00AB, 0x00AB},
    {0x2018, 0x2018},
    {0x201B, 0x201C},
    {0x201F, 0x201F},
    {0x2039, 0x2039},
    {0x2E02, 0x2E02},
    {0x2E04, 0x2E04},
    {0x2E09, 0x2E09},
    {0x2E0C, 0x2E0C},
    {0x2E1C, 0x2E1C},
    {0x2E20, 0x2E20},
    // unicode Po category
    {0xA1, 0xA1},
    {0xA7, 0xA7},
    {0xB6, 0xB7},
    {0xBF, 0xBF},
    {0x37E, 0x37E},
    {0x387, 0x387},
    {0x55A, 0x55F},
    {0x589, 0x589},
    {0x5C0, 0x5C0},
    {0x5C3, 0x5C3},
    {0x5C6, 0x5C6},
    {0x5F3, 0x5F4},
    {0x609, 0x60A},
    {0x60C, 0x60D},
    {0x61B, 0x61B},
    {0x61E, 0x61F},
    {0x66A, 0x66D},
    {0x6D4, 0x6D4},
    {0x700, 0x70D},
    {0x7F7, 0x7F9},
    {0x830, 0x83E},
    {0x85E, 0x85E},
    {0x964, 0x965},
    {0x970, 0x970},
    {0x9FD, 0x9FD},
    {0xA76, 0xA76},
    {0xAF0, 0xAF0},
    {0xC77, 0xC77},
    {0xC84, 0xC84},
    {0xDF4, 0xDF4},
    {0xE4F, 0xE4F},
    {0xE5A, 0xE5B},
    {0xF04, 0xF12},
    {0xF14, 0xF14},
    {0xF85, 0xF85},
    {0xFD0, 0xFD4},
    {0xFD9, 0xFDA},
    {0x104A, 0x104F},
    {0x10FB, 0x10FB},
    {0x1360, 0x1368},
    {0x166E, 0x166E},
    {0x16EB, 0x16ED},
    {0x1735, 0x1736},
    {0x17D4, 0x17D6},
    {0x17D8, 0x17DA},
    {0x1800, 0x1805},
    {0x1807, 0x180A},
    {0x1944, 0x1945},
    {0x1A1E, 0x1A1F},
    {0x1AA0, 0x1AA6},
    {0x1AA8, 0x1AAD},
    {0x1B5A, 0x1B60},
    {0x1BFC, 0x1BFF},
    {0x1C3B, 0x1C3F},
    {0x1C7E, 0x1C7F},
    {0x1CC0, 0x1CC7},
    {0x1CD3, 0x1CD3},
    {0x2016, 0x2017},
    {0x2020, 0x2027},
    {0x2030, 0x2038},
    {0x203B, 0x203E},
    {0x2041, 0x2043},
    {0x2047, 0x2051},
    {0x2053, 0x2053},
    {0x2055, 0x205E},
    {0x2CF9, 0x2CFC},
    {0x2CFE, 0x2CFF},
    {0x2D70, 0x2D70},
    {0x2E00, 0x2E01},
    {0x2E06, 0x2E08},
    {0x2E0B, 0x2E0B},
    {0x2E0E, 0x2E16},
    {0x2E18, 0x2E19},
    {0x2E1B, 0x2E1B},
    {0x2E1E, 0x2E1F},
    {0x2E2A, 0x2E2E},
    {0x2E30, 0x2E39},
    {0x2E3C, 0x2E3F},
    {0x2E41, 0x2E41},
    {0x2E43, 0x2E4F},
    {0x2E52, 0x2E52},
    {0x3001, 0x3003},
    {0x303D, 0x303D},
    {0x30FB, 0x30FB},
    {0xA4FE, 0xA4FF},
    {0xA60D, 0xA60F},
    {0xA673, 0xA673},
    {0xA67E, 0xA67E},
    {0xA6F2, 0xA6F7},
    {0xA874, 0xA877},
    {0xA8CE, 0xA8CF},
    {0xA8F8, 0xA8FA},
    {0xA8FC, 0xA8FC},
    {0xA92E, 0xA92F},
    {0xA95F, 0xA95F},
    {0xA9C1, 0xA9CD},
    {0xA9DE, 0xA9DF},
    {0xAA5C, 0xAA5F},
    {0xAADE, 0xAADF},
    {0xAAF0, 0xAAF1},
    {0xABEB, 0xABEB},
    {0xFE10, 0xFE16},
    {0xFE19, 0xFE19},
    {0xFE30, 0xFE30},
    {0xFE45, 0xFE46},
    {0xFE49, 0xFE4C},
    {0xFE50, 0xFE52},
    {0xFE54, 0xFE57},
    {0xFE5F, 0xFE61},
    {0xFE68, 0xFE68},
    {0xFE6A, 0xFE6B},
    {0xFF01, 0xFF03},
    {0xFF05, 0xFF07},
    {0xFF0A, 0xFF0A},
    {0xFF0C, 0xFF0C},
    {0xFF0E, 0xFF0F},
    {0xFF1A, 0xFF1B},
    {0xFF1F, 0xFF20},
    {0xFF3C, 0xFF3C},
    {0xFF61, 0xFF61},
    {0xFF64, 0xFF65},
    {0x10100, 0x10102},
    {0x1039F, 0x1039F},
    {0x103D0, 0x103D0},
    {0x1056F, 0x1056F},
    {0x10857, 0x10857},
    {0x1091F, 0x1091F},
    {0x1093F, 0x1093F},
    {0x10A50, 0x10A58},
    {0x10A7F, 0x10A7F},
    {0x10AF0, 0x10AF6},
    {0x10B39, 0x10B3F},
    {0x10B99, 0x10B9C},
    {0x10F55, 0x10F59},
    {0x11047, 0x1104D},
    {0x110BB, 0x110BC},
    {0x110BE, 0x110C1},
    {0x11140, 0x11143},
    {0x11174, 0x11175},
    {0x111C5, 0x111C8},
    {0x111CD, 0x111CD},
    {0x111DB, 0x111DB},
    {0x111DD, 0x111DF},
    {0x11238, 0x1123D},
    {0x112A9, 0x112A9},
    {0x1144B, 0x1144F},
    {0x1145A, 0x1145B},
    {0x1145D, 0x1145D},
    {0x114C6, 0x114C6},
    {0x115C1, 0x115D7},
    {0x11641, 0x11643},
    {0x11660, 0x1166C},
    {0x1173C, 0x1173E},
    {0x1183B, 0x1183B},
    {0x11944, 0x11946},
    {0x119E2, 0x119E2},
    {0x11A3F, 0x11A46},
    {0x11A9A, 0x11A9C},
    {0x11A9E, 0x11AA2},
    {0x11C41, 0x11C45},
    {0x11C70, 0x11C71},
    {0x11EF7, 0x11EF8},
    {0x11FFF, 0x11FFF},
    {0x12470, 0x12474},
    {0x16A6E, 0x16A6F},
    {0x16AF5, 0x16AF5},
    {0x16B37, 0x16B3B},
    {0x16B44, 0x16B44},
    {0x16E97, 0x16E9A},
    {0x16FE2, 0x16FE2},
    {0x1BC9F, 0x1BC9F},
    {0x1DA87, 0x1DA8B},
    // Unicode Ps category
    {0xF3A, 0xF3A},
    {0xF3C, 0xF3C},
    {0x169B, 0x169B},
    {0x201A, 0x201A},
    {0x201E, 0x201E},
    {0x2045, 0x2045},
    {0x207D, 0x207D},
    {0x208D, 0x208D},
    {0x2308, 0x2308},
    {0x230A, 0x230A},
    {0x2329, 0x2329},
    {0x2768, 0x2768},
    {0x276A, 0x276A},
    {0x276C, 0x276C},
    {0x276E, 0x276E},
    {0x2770, 0x2770},
    {0x2772, 0x2772},
    {0x2774, 0x2774},
    {0x27C5, 0x27C5},
    {0x27E6, 0x27E6},
    {0x27E8, 0x27E8},
    {0x27EA, 0x27EA},
    {0x27EC, 0x27EC},
    {0x27EE, 0x27EE},
    {0x2983, 0x2983},
    {0x2985, 0x2985},
    {0x2987, 0x2987},
    {0x2989, 0x2989},
    {0x298B, 0x298B},
    {0x298D, 0x298D},
    {0x298F, 0x298F},
    {0x2991, 0x2991},
    {0x2993, 0x2993},
    {0x2995, 0x2995},
    {0x2997, 0x2997},
    {0x29D8, 0x29D8},
    {0x29DA, 0x29DA},
    {0x29FC, 0x29FC},
    {0x2E22, 0x2E22},
    {0x2E24, 0x2E24},
    {0x2E26, 0x2E26},
    {0x2E28, 0x2E28},
    {0x2E42, 0x2E42},
    {0x3008, 0x3008},
    {0x300A, 0x300A},
    {0x300C, 0x300C},
    {0x300E, 0x300E},
    {0x3010, 0x3010},
    {0x3014, 0x3014},
    {0x3016, 0x3016},
    {0x3018, 0x3018},
    {0x301A, 0x301A},
    {0x301D, 0x301D},
    {0xFD3F, 0xFD3F},
    {0xFE17, 0xFE17},
    {0xFE35, 0xFE35},
    {0xFE37, 0xFE37},
    {0xFE39, 0xFE39},
    {0xFE3B, 0xFE3B},
    {0xFE3D, 0xFE3D},
    {0xFE3F, 0xFE3F},
    {0xFE41, 0xFE41},
    {0xFE43, 0xFE43},
    {0xFE47, 0xFE47},
    {0xFE59, 0xFE59},
    {0xFE5B, 0xFE5B},
    {0xFE5D, 0xFE5D},
    {0xFF08, 0xFF08},
    {0xFF3B, 0xFF3B},
    {0xFF5B, 0xFF5B},
    {0xFF5F, 0xFF5F},
    {0xFF62, 0xFF62},
};

static const codepoint_range WHITESPACE_RANGES[9] = {
    {0x0009, 0x000A}, {0x000C, 0x000D}, {0x20, 0x20},
    {0xA0, 0xA0},     {0x1680, 0x1680}, {0x2000, 0x200A},
    {0x202F, 0x202F}, {0x205F, 0x205F}, {0x3000, 0x3000},
};

static const codepoint_collection TOKEN_CP_RANGES[TOKEN_TYPES_SIZE] = {
    {0, NULL, false},
    {1, (codepoint_range *)BACKTICK_RANGES, true},
    {1, (codepoint_range *)STAR_RANGES, true},
    {1, (codepoint_range *)UNDERSCORE_RANGES, true},
    {360, (codepoint_range *)PUNCTUATION_RANGES, false},
    {9, (codepoint_range *)WHITESPACE_RANGES, true},
};

////////////////////////////
// end token codepoint ranges
////////////////////////////

typedef struct Token {
  int unsigned type;
  size_t start;
  size_t length;
} Token;

static const int unsigned DONT_PARSE_INLINE_BLOCKS_SIZE = 9;
static const int unsigned
    DONT_PARSE_INLINE_BLOCKS[DONT_PARSE_INLINE_BLOCKS_SIZE] = {
        ASTN_CODE_BLOCK,        ASTN_FENCED_CODE_BLOCK, ASTN_HTML_BLOCK_TYPE_1,
        ASTN_HTML_BLOCK_TYPE_2, ASTN_HTML_BLOCK_TYPE_3, ASTN_HTML_BLOCK_TYPE_4,
        ASTN_HTML_BLOCK_TYPE_5, ASTN_HTML_BLOCK_TYPE_6, ASTN_HTML_BLOCK_TYPE_7,
};

typedef struct Delimiter {
  struct Delimiter *next;
  struct Delimiter *prev;
  char type;
  size_t count;
  bool active;
  bool potential_opener;
} Delimiter;

#endif  // INLINE_H
